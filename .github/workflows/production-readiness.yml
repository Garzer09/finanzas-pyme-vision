name: Production Readiness Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      full_validation:
        description: 'Run full production readiness validation'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '18'
  # Production environment variables for validation
  VITE_ENVIRONMENT: production
  VITE_ENABLE_RATE_LIMITING: 'true'
  VITE_ENABLE_CSRF_PROTECTION: 'true'
  VITE_ENABLE_SECURITY_LOGGING: 'true'
  VITE_ENABLE_HEALTH_MONITORING: 'true'
  VITE_ENABLE_PERFORMANCE_MONITORING: 'true'
  # CI-safe fallback values for required environment variables
  VITE_SUPABASE_URL: 'https://demo.supabase.co'
  VITE_SUPABASE_ANON_KEY: 'demo-key'

defaults:
  run:
    shell: bash

jobs:
  # Core validation - always run
  core-validation:
    name: Core Production Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.core-check.outputs.ready }}
      validation-status: ${{ steps.core-summary.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment Debug
        run: |
          set -e
          echo "🔍 Production Environment Debug (masked sensitive values):"
          echo "NODE_VERSION: ${{ env.NODE_VERSION || 'not-set' }}"
          echo "VITE_ENVIRONMENT: ${VITE_ENVIRONMENT:-not-set}"
          echo "VITE_ENABLE_RATE_LIMITING: ${VITE_ENABLE_RATE_LIMITING:-not-set}"
          echo "VITE_ENABLE_CSRF_PROTECTION: ${VITE_ENABLE_CSRF_PROTECTION:-not-set}"
          echo "VITE_ENABLE_SECURITY_LOGGING: ${VITE_ENABLE_SECURITY_LOGGING:-not-set}"
          echo "VITE_SUPABASE_URL: $(echo '${{ secrets.VITE_SUPABASE_URL || env.VITE_SUPABASE_URL || 'https://demo.supabase.co' }}' | head -c 20)***"
          echo "VITE_SUPABASE_ANON_KEY: $(echo '${{ secrets.VITE_SUPABASE_ANON_KEY || env.VITE_SUPABASE_ANON_KEY || 'demo-key' }}' | head -c 10)***"
          echo "VITE_SENTRY_DSN: $(echo '${{ secrets.VITE_SENTRY_DSN || 'not-set' }}' | head -c 20)***"
          echo "✅ Production environment debug completed"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION || '18' }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          set -e
          echo "📦 Installing dependencies for production validation..."
          npm ci || {
            echo "❌ Production dependency installation failed"
            echo "🔍 Debugging npm installation:"
            npm --version
            node --version
            ls -la package*.json
            exit 1
          }
          echo "✅ Production dependencies installed successfully"
        
      - name: Run production build
        id: prod-build
        run: |
          set -e
          echo "🏗️ Running production build..."
          npm run build || {
            echo "❌ Production build failed"
            echo "🔍 Build debugging info:"
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            ls -la dist/ 2>/dev/null || echo "No dist directory found"
            exit 1
          }
          echo "✅ Production build completed successfully"
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || env.VITE_SUPABASE_URL || 'https://demo.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || env.VITE_SUPABASE_ANON_KEY || 'demo-key' }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN || '' }}
          
      - name: Run core stability check
        id: core-check
        run: |
          set -e
          echo "🔍 Running core stability check..."
          npm run stability-check || {
            echo "❌ Core stability check failed"
            echo "🔍 Stability check debugging:"
            echo "Check that the stability-check script exists and runs properly"
            exit 1
          }
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "✅ Core stability check passed"
        env:
          CI: true
        continue-on-error: false
        
      - name: Core Validation Summary
        id: core-summary
        if: always()
        run: |
          set -e
          echo "📊 Core Validation Summary:"
          echo "==========================="
          
          PROD_BUILD="${{ steps.prod-build.outcome || 'skipped' }}"
          CORE_CHECK="${{ steps.core-check.outcome || 'skipped' }}"
          
          echo "Production Build: $PROD_BUILD"
          echo "Core Stability Check: $CORE_CHECK"
          
          if [[ "$PROD_BUILD" == "success" && "$CORE_CHECK" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Core Validation Status: SUCCESS"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "❌ Core Validation Status: FAILURE"
          fi

  # Comprehensive test suite
  test-suite-validation:
    name: Test Suite Validation
    runs-on: ubuntu-latest
    needs: core-validation
    
    outputs:
      test-status: ${{ steps.test-summary.outputs.status }}
    
    strategy:
      matrix:
        test-category: [unit, auth, navigation, recovery]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment Debug
        run: |
          set -e
          echo "🔍 Test Environment Debug for ${{ matrix.test-category }}:"
          echo "NODE_VERSION: ${{ env.NODE_VERSION || 'not-set' }}"
          echo "CI: ${CI:-not-set}"
          echo "Test Category: ${{ matrix.test-category }}"
          echo "✅ Test environment debug completed"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION || '18' }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          set -e
          echo "📦 Installing dependencies for ${{ matrix.test-category }} tests..."
          npm ci || {
            echo "❌ Test dependency installation failed"
            exit 1
          }
          echo "✅ Test dependencies installed"
        
      - name: Run unit tests
        if: matrix.test-category == 'unit'
        run: |
          set -e
          echo "🧪 Running unit tests with coverage..."
          npm run test:coverage || {
            echo "❌ Unit tests failed"
            echo "🔍 Unit test debugging:"
            echo "Check test output above for specific failures"
            exit 1
          }
          echo "✅ Unit tests completed successfully"
        env:
          CI: true
          
      - name: Run authentication tests
        if: matrix.test-category == 'auth'
        run: |
          set -e
          echo "🔐 Running authentication tests..."
          npm run validate:auth || {
            echo "❌ Authentication tests failed"
            echo "🔍 Auth test debugging:"
            echo "Check authentication flow and configuration"
            exit 1
          }
          echo "✅ Authentication tests completed successfully"
        env:
          CI: true
        
      - name: Run navigation flow tests
        if: matrix.test-category == 'navigation'
        run: |
          set -e
          echo "🧭 Running navigation flow tests..."
          npm run validate:navigation || {
            echo "❌ Navigation tests failed"
            echo "🔍 Navigation test debugging:"
            echo "Check routing and navigation logic"
            exit 1
          }
          echo "✅ Navigation tests completed successfully"
        env:
          CI: true
        
      - name: Run error recovery tests
        if: matrix.test-category == 'recovery'
        run: |
          set -e
          echo "🚨 Running error recovery tests..."
          npm run validate:recovery || {
            echo "❌ Error recovery tests failed"
            echo "🔍 Recovery test debugging:"
            echo "Check error handling and recovery mechanisms"
            exit 1
          }
          echo "✅ Error recovery tests completed successfully"
        env:
          CI: true
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-category }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # E2E tests 
  e2e-validation:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: core-validation
    if: github.event.inputs.full_validation == 'true' || github.ref == 'refs/heads/main'
    
    outputs:
      e2e-status: ${{ steps.e2e-summary.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment Debug
        run: |
          set -e
          echo "🔍 E2E Test Environment Debug:"
          echo "NODE_VERSION: ${{ env.NODE_VERSION || 'not-set' }}"
          echo "CI: ${CI:-not-set}"
          echo "ALLOW_E2E_FAILURES: ${ALLOW_E2E_FAILURES:-not-set}"
          echo "VITE_SUPABASE_URL: $(echo '${{ secrets.VITE_SUPABASE_URL || env.VITE_SUPABASE_URL || 'https://demo.supabase.co' }}' | head -c 20)***"
          echo "✅ E2E environment debug completed"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION || '18' }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          set -e
          echo "📦 Installing dependencies for E2E tests..."
          npm ci || {
            echo "❌ E2E dependency installation failed"
            exit 1
          }
          echo "✅ E2E dependencies installed"
        
      - name: Install Playwright browsers
        run: |
          set -e
          echo "🎭 Installing Playwright browsers..."
          node scripts/install-browsers.cjs || {
            echo "⚠️ Playwright browser installation failed (non-critical)"
            echo "Some E2E tests may not run properly"
          }
        continue-on-error: true  # Allow browser installation to fail
        
      - name: Run E2E tests
        id: e2e-tests
        run: |
          set -e
          echo "🎭 Running E2E tests..."
          npm run test:e2e:safe || {
            echo "⚠️ E2E tests failed (allowing failures)"
            echo "E2E test failures are logged but won't fail the validation"
          }
        env:
          CI: true
          ALLOW_E2E_FAILURES: 'true'
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || env.VITE_SUPABASE_URL || 'https://demo.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || env.VITE_SUPABASE_ANON_KEY || 'demo-key' }}
          
      - name: E2E Summary
        id: e2e-summary
        if: always()
        run: |
          set -e
          echo "📊 E2E Test Summary:"
          echo "===================="
          
          E2E_TESTS="${{ steps.e2e-tests.outcome || 'skipped' }}"
          echo "E2E Tests: $E2E_TESTS"
          
          # E2E tests are allowed to fail in production readiness
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ E2E Status: COMPLETED (failures allowed)"
          
      - name: Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Security and performance validation
  security-performance-validation:
    name: Security & Performance
    runs-on: ubuntu-latest
    needs: core-validation
    
    outputs:
      security-status: ${{ steps.security-summary.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment Debug
        run: |
          set -e
          echo "🔍 Security & Performance Environment Debug:"
          echo "NODE_VERSION: ${{ env.NODE_VERSION || 'not-set' }}"
          echo "VITE_ENABLE_RATE_LIMITING: ${VITE_ENABLE_RATE_LIMITING:-not-set}"
          echo "VITE_ENABLE_CSRF_PROTECTION: ${VITE_ENABLE_CSRF_PROTECTION:-not-set}"
          echo "VITE_ENABLE_SECURITY_LOGGING: ${VITE_ENABLE_SECURITY_LOGGING:-not-set}"
          echo "✅ Security environment debug completed"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION || '18' }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          set -e
          echo "📦 Installing dependencies for security scan..."
          npm ci || {
            echo "❌ Security scan dependency installation failed"
            exit 1
          }
          echo "✅ Security scan dependencies installed"
        
      - name: Run security audit
        id: security-audit
        run: |
          set -e
          echo "🔐 Running security audit..."
          npm audit --audit-level=high --production || {
            echo "⚠️ Security audit completed with warnings"
            echo "Review security vulnerabilities in the audit output above"
          }
          echo "✅ Security audit completed"
        continue-on-error: true
        
      - name: Run security validation tests
        id: security-tests
        run: |
          set -e
          echo "🔐 Running security validation tests..."
          npm test -- --run src/services/__tests__/production-security.test.ts || {
            echo "⚠️ Security tests completed (failures allowed)"
            echo "Review security test results above"
          }
        continue-on-error: true
        
      - name: Validate security configuration
        id: security-config
        run: |
          set -e
          echo "🔍 Checking security environment variables..."
          test "$VITE_ENABLE_RATE_LIMITING" = "true" && echo "✅ Rate limiting enabled" || echo "⚠️ Rate limiting not enabled"
          test "$VITE_ENABLE_CSRF_PROTECTION" = "true" && echo "✅ CSRF protection enabled" || echo "⚠️ CSRF protection not enabled"
          test "$VITE_ENABLE_SECURITY_LOGGING" = "true" && echo "✅ Security logging enabled" || echo "⚠️ Security logging not enabled"
          echo "✅ Security configuration validation completed"
          
      - name: Run performance tests
        id: performance-tests
        run: |
          set -e
          echo "📊 Running performance tests..."
          # Build and analyze bundle size
          npm run build || {
            echo "❌ Performance build failed"
            exit 1
          }
          echo "📊 Build analysis:"
          du -sh dist/ || echo "Could not analyze dist size"
          echo "📊 Asset analysis:"
          find dist/assets -name "*.js" -o -name "*.css" 2>/dev/null | head -10 | xargs ls -lh 2>/dev/null || echo "Could not analyze assets"
          echo "✅ Performance tests completed"
          
      - name: Check bundle size
        run: |
          set -e
          echo "📊 Checking bundle sizes..."
          # Simple bundle size check (adjust limits as needed)
          if [ -d "dist/assets" ]; then
            MAIN_JS_SIZE=$(find dist/assets -name "index-*.js" -exec stat --printf="%s" {} \; 2>/dev/null || echo "0")
            MAIN_CSS_SIZE=$(find dist/assets -name "index-*.css" -exec stat --printf="%s" {} \; 2>/dev/null || echo "0")
            
            echo "Main JS bundle size: $((MAIN_JS_SIZE / 1024))KB"
            echo "Main CSS bundle size: $((MAIN_CSS_SIZE / 1024))KB"
            
            # Warning if bundles are too large (adjust thresholds as needed)
            if [ $MAIN_JS_SIZE -gt 1048576 ]; then # 1MB
              echo "⚠️ Main JS bundle is large (>1MB)"
            fi
            
            if [ $MAIN_CSS_SIZE -gt 204800 ]; then # 200KB
              echo "⚠️ Main CSS bundle is large (>200KB)"
            fi
          else
            echo "⚠️ No dist directory found for bundle analysis"
          fi
          echo "✅ Bundle size check completed"
          
      - name: Security Summary
        id: security-summary
        if: always()
        run: |
          set -e
          echo "📊 Security & Performance Summary:"
          echo "=================================="
          
          SECURITY_AUDIT="${{ steps.security-audit.outcome || 'skipped' }}"
          SECURITY_TESTS="${{ steps.security-tests.outcome || 'skipped' }}"
          SECURITY_CONFIG="${{ steps.security-config.outcome || 'skipped' }}"
          PERFORMANCE_TESTS="${{ steps.performance-tests.outcome || 'skipped' }}"
          
          echo "Security Audit: $SECURITY_AUDIT"
          echo "Security Tests: $SECURITY_TESTS"
          echo "Security Config: $SECURITY_CONFIG"
          echo "Performance Tests: $PERFORMANCE_TESTS"
          
          # Security validation is considered successful if config check passes
          if [[ "$SECURITY_CONFIG" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Security & Performance Status: SUCCESS"
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "⚠️ Security & Performance Status: PARTIAL SUCCESS"
          fi

  # Code quality validation
  code-quality-validation:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: core-validation
    
    outputs:
      quality-status: ${{ steps.quality-summary.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment Debug
        run: |
          set -e
          echo "🔍 Code Quality Environment Debug:"
          echo "NODE_VERSION: ${{ env.NODE_VERSION || 'not-set' }}"
          echo "GITHUB_REF: ${GITHUB_REF:-not-set}"
          echo "✅ Code quality environment debug completed"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION || '18' }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          set -e
          echo "📦 Installing dependencies for code quality check..."
          npm ci || {
            echo "❌ Code quality dependency installation failed"
            exit 1
          }
          echo "✅ Code quality dependencies installed"
        
      - name: Run linter
        id: linter
        run: |
          set -e
          echo "🔍 Running linter..."
          npm run lint || {
            echo "⚠️ Linting issues found (non-critical)"
            echo "Please review and fix linting issues"
          }
        continue-on-error: true
        
      - name: Run type checking
        id: type-check
        run: |
          set -e
          echo "🔍 Running TypeScript type checking..."
          npx tsc --noEmit || {
            echo "❌ TypeScript type checking failed"
            echo "🔍 Type checking debugging:"
            echo "Check TypeScript errors above"
            exit 1
          }
          echo "✅ TypeScript type checking passed"
        
      - name: Check for TODO/FIXME comments
        id: todo-check
        run: |
          set -e
          echo "🔍 Checking for development comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ --exclude-dir=node_modules 2>/dev/null || echo "")
          if [ ! -z "$TODO_COUNT" ]; then
            echo "⚠️ Found development comments:"
            echo "$TODO_COUNT"
            echo "Consider resolving these before production deployment."
          else
            echo "✅ No development comments found"
          fi
        continue-on-error: true
        
      - name: Quality Summary
        id: quality-summary
        if: always()
        run: |
          set -e
          echo "📊 Code Quality Summary:"
          echo "======================="
          
          LINTER="${{ steps.linter.outcome || 'skipped' }}"
          TYPE_CHECK="${{ steps.type-check.outcome || 'skipped' }}"
          TODO_CHECK="${{ steps.todo-check.outcome || 'skipped' }}"
          
          echo "Linter: $LINTER"
          echo "Type Check: $TYPE_CHECK"
          echo "TODO Check: $TODO_CHECK"
          
          # Type checking is the critical component
          if [[ "$TYPE_CHECK" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Code Quality Status: SUCCESS"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "❌ Code Quality Status: FAILURE"
          fi

  # Environment and configuration validation
  environment-validation:
    name: Environment Configuration
    runs-on: ubuntu-latest
    needs: core-validation
    
    outputs:
      env-status: ${{ steps.env-summary.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment Debug
        run: |
          set -e
          echo "🔍 Environment Configuration Debug:"
          echo "NODE_VERSION: ${{ env.NODE_VERSION || 'not-set' }}"
          echo "VITE_ENVIRONMENT: ${VITE_ENVIRONMENT:-not-set}"
          echo "✅ Environment config debug completed"
        
      - name: Validate environment template
        id: env-template
        run: |
          set -e
          echo "🔍 Checking environment configuration..."
          
          # Check if production template exists
          if [ -f .env.production.template ]; then
            echo "✅ Production environment template found"
            echo "📋 Required environment variables:"
            cat .env.production.template
          else
            echo "⚠️ No production environment template found"
          fi
          echo "✅ Environment template check completed"
          
      - name: Validate required secrets
        id: required-secrets
        run: |
          set -e
          echo "🔍 Checking GitHub secrets configuration..."
          
          # List of required production secrets
          REQUIRED_SECRETS="VITE_SUPABASE_URL VITE_SUPABASE_ANON_KEY"
          
          SECRET_CHECK_PASS=true
          for secret in $REQUIRED_SECRETS; do
            # Check if we have the secret or fallback
            SECRET_VALUE="${{ secrets.VITE_SUPABASE_URL || env.VITE_SUPABASE_URL || '' }}"
            if [ "$secret" = "VITE_SUPABASE_ANON_KEY" ]; then
              SECRET_VALUE="${{ secrets.VITE_SUPABASE_ANON_KEY || env.VITE_SUPABASE_ANON_KEY || '' }}"
            fi
            
            if [ -n "$SECRET_VALUE" ]; then
              echo "✅ $secret is configured"
            else
              echo "⚠️ $secret is not configured (using fallback)"
            fi
          done
          
          # Optional secrets
          OPTIONAL_SECRETS="VITE_SENTRY_DSN SENTRY_ORG SENTRY_PROJECT"
          
          echo "📋 Optional secrets status:"
          for secret in $OPTIONAL_SECRETS; do
            SECRET_VALUE="${{ secrets.VITE_SENTRY_DSN || '' }}"
            if [ "$secret" = "SENTRY_ORG" ]; then
              SECRET_VALUE="${{ secrets.SENTRY_ORG || '' }}"
            elif [ "$secret" = "SENTRY_PROJECT" ]; then
              SECRET_VALUE="${{ secrets.SENTRY_PROJECT || '' }}"
            fi
            
            if [ -n "$SECRET_VALUE" ]; then
              echo "✅ $secret is configured"
            else
              echo "ℹ️ $secret is not configured (optional)"
            fi
          done
          echo "✅ Secret validation completed"
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || env.VITE_SUPABASE_URL || '' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || env.VITE_SUPABASE_ANON_KEY || '' }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN || '' }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG || '' }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || '' }}
          
      - name: Environment Summary
        id: env-summary
        if: always()
        run: |
          set -e
          echo "📊 Environment Configuration Summary:"
          echo "===================================="
          
          ENV_TEMPLATE="${{ steps.env-template.outcome || 'skipped' }}"
          REQUIRED_SECRETS="${{ steps.required-secrets.outcome || 'skipped' }}"
          
          echo "Environment Template: $ENV_TEMPLATE"
          echo "Required Secrets: $REQUIRED_SECRETS"
          
          if [[ "$ENV_TEMPLATE" == "success" && "$REQUIRED_SECRETS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Environment Configuration Status: SUCCESS"
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "⚠️ Environment Configuration Status: PARTIAL SUCCESS"
          fi

  # Final production readiness report
  production-readiness-report:
    name: Production Readiness Report
    runs-on: ubuntu-latest
    needs: [core-validation, test-suite-validation, security-performance-validation, code-quality-validation, environment-validation]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: validation-results
        continue-on-error: true  # Don't fail if no artifacts exist
          
      - name: Generate production readiness report
        run: |
          set -e
          echo "# 🚀 Production Readiness Report" > READINESS_REPORT.md
          echo "" >> READINESS_REPORT.md
          echo "**Validation Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> READINESS_REPORT.md
          echo "**Branch:** ${{ github.ref_name }}" >> READINESS_REPORT.md
          echo "**Commit:** ${{ github.sha }}" >> READINESS_REPORT.md
          echo "" >> READINESS_REPORT.md
          
          echo "## ✅ Validation Results" >> READINESS_REPORT.md
          echo "" >> READINESS_REPORT.md
          
          # Check job results
          echo "| Category | Status | Details |" >> READINESS_REPORT.md
          echo "|----------|--------|---------|" >> READINESS_REPORT.md
          
          # Core validation
          if [ "${{ needs.core-validation.result }}" = "success" ]; then
            echo "| Core Validation | ✅ PASS | Build and stability checks passed |" >> READINESS_REPORT.md
          else
            echo "| Core Validation | ❌ FAIL | Build or stability checks failed |" >> READINESS_REPORT.md
          fi
          
          # Test suite validation
          if [ "${{ needs.test-suite-validation.result }}" = "success" ]; then
            echo "| Test Suite | ✅ PASS | All test categories passed |" >> READINESS_REPORT.md
          else
            echo "| Test Suite | ⚠️ PARTIAL | Some test categories failed |" >> READINESS_REPORT.md
          fi
          
          # Security validation
          if [ "${{ needs.security-performance-validation.result }}" = "success" ]; then
            echo "| Security & Performance | ✅ PASS | Security and performance checks passed |" >> READINESS_REPORT.md
          else
            echo "| Security & Performance | ⚠️ REVIEW | Review security or performance issues |" >> READINESS_REPORT.md
          fi
          
          # Code quality
          if [ "${{ needs.code-quality-validation.result }}" = "success" ]; then
            echo "| Code Quality | ✅ PASS | Code quality standards met |" >> READINESS_REPORT.md
          else
            echo "| Code Quality | ⚠️ REVIEW | Code quality issues found |" >> READINESS_REPORT.md
          fi
          
          # Environment validation
          if [ "${{ needs.environment-validation.result }}" = "success" ]; then
            echo "| Environment Config | ✅ PASS | Environment properly configured |" >> READINESS_REPORT.md
          else
            echo "| Environment Config | ⚠️ REVIEW | Environment configuration issues |" >> READINESS_REPORT.md
          fi
          
          echo "" >> READINESS_REPORT.md
          
          # Overall assessment
          if [ "${{ needs.core-validation.result }}" = "success" ] && [ "${{ needs.test-suite-validation.result }}" = "success" ]; then
            echo "## 🎉 Overall Assessment: READY FOR PRODUCTION" >> READINESS_REPORT.md
            echo "" >> READINESS_REPORT.md
            echo "The application has passed all critical validation checks and is ready for production deployment." >> READINESS_REPORT.md
          else
            echo "## 🚨 Overall Assessment: NOT READY FOR PRODUCTION" >> READINESS_REPORT.md
            echo "" >> READINESS_REPORT.md
            echo "Critical issues were found that must be resolved before production deployment." >> READINESS_REPORT.md
          fi
          
          echo "" >> READINESS_REPORT.md
          echo "## 📊 Validation Artifacts" >> READINESS_REPORT.md
          echo "" >> READINESS_REPORT.md
          echo "- Test results and coverage reports are available in the workflow artifacts" >> READINESS_REPORT.md
          echo "- Security scan results are included in the security validation step" >> READINESS_REPORT.md
          echo "- Performance metrics are available in the performance validation step" >> READINESS_REPORT.md
          
      - name: Upload production readiness report
        uses: actions/upload-artifact@v4
        with:
          name: production-readiness-report
          path: READINESS_REPORT.md
          retention-days: 30
          
      - name: Display report summary
        run: |
          set -e
          echo "📋 Production Readiness Summary:"
          cat READINESS_REPORT.md